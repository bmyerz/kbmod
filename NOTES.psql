First database investigation:
  http://postgis.net/documentation

  # To install on OS X
  sudo port install postgis2
  sudo port install postgresql93-server
  sudo mkdir -p /opt/local/var/db/postgresql93/defaultdb
  sudo chown postgres:postgres /opt/local/var/db/postgresql93/defaultdb
  sudo su postgres -c '/opt/local/lib/postgresql93/bin/initdb -D /opt/local/var/db/postgresql93/defaultdb' 
    The files belonging to this database system will be owned by user "postgres".
    This user must also own the server process.
    The database cluster will be initialized with locale "en_US.UTF-8".
    The default database encoding has accordingly been set to "UTF8".
    The default text search configuration will be set to "english".

    WARNING: enabling "trust" authentication for local connections
    You can change this by editing pg_hba.conf or using the option -A, or
    --auth-local and --auth-host, the next time you run initdb.

    Success. You can now start the database server using:
        /opt/local/lib/postgresql93/bin/postgres -D /opt/local/var/db/postgresql93/defaultdb
    or
        /opt/local/lib/postgresql93/bin/pg_ctl -D /opt/local/var/db/postgresql93/defaultdb -l logfile start

    Actually, you need to
        sudo -u postgres /opt/local/lib/postgresql93/bin/postgres -D /opt/local/var/db/postgresql93/defaultdb

######## Postgres mojo

/opt/local/lib/postgresql93/bin/psql -U postgres
\? = help
\dt = show tables
\l = show databases
\c postgres = connect to database postgres

create database kbmod;
\c kbmod
CREATE EXTENSION postgis; # load postgis spatial extension

I want to use the Geography package since everything is done in angles
http://postgis.net/docs/manual-2.1/PostGIS_Special_Functions_Index.html#PostGIS_GeographyFunctions

Dates and times
http://www.postgresql.org/docs/9.1/static/functions-datetime.html

# 1e6
CREATE TABLE fields ( 
    fieldId BIGINT PRIMARY KEY,
    run INTEGER,
    camcol SMALLINT,
    field INTEGER,
    filter VARCHAR(1),
    bbox GEOGRAPHY(POLYGON,4326),
    tmid TIMESTAMP WITH TIME ZONE,
    trange TSTZRANGE
  );
# Since I'll be dropping this on and off
DROP TABLE fields;
# I expect this is the index I will want to create
CREATE INDEX fields_gix ON fields USING GIST (bbox);
# Testing insertion of data
INSERT INTO fields (fieldId, run, camcol, field, filter, bbox, tmid, trange) VALUES
 (3, 100, 1, 148, 'r', ST_GeomFromText('POLYGON((
    -73.973057 40.764356, -73.981898 40.768094,
    -73.958209 40.800621, -73.949282 40.796853, -73.973057 40.764356))',4326),
    '2010-01-01 14:30:30.1Z',
    '[2010-01-01 14:30:00.1Z, 2010-01-01 14:31:01.1Z]');

# 1e12
CREATE TABLE pixels ( 
    pixelId BIGSERIAL PRIMARY KEY,
    fieldId BIGINT REFERENCES fields(fieldId),
    flux GEOGRAPHY(POINTM,4326),
    mask INTEGER
  );
DROP TABLE pixels;
INSERT INTO pixels (fieldId, flux, mask) VALUES
 (1, ST_MakePointM(-71.1043443253471, 42.3150676015829, 11.0), 128),
 (1, ST_MakePointM(-71.1043443253471, 42.3150676015829, 12.0), 128)
;

CREATE TABLE pixelstest ( 
    pixelId BIGSERIAL PRIMARY KEY,
    fieldId BIGINT REFERENCES fields(fieldId),
    ra DOUBLE PRECISION,
    decl DOUBLE PRECISION,
    fval REAL,
    radec GEOGRAPHY(POINT,4326),
    mask INTEGER
  );

INSERT INTO pixelstest (fieldId, ra, decl, fval, mask) VALUES
 (8275416271112796948, -71.1043443253471, 42.3150676015829, 11.0, 128),
 (8275416271112796948, -71.1043443253471, 42.3150676015829, 12.0, 128)
;
UPDATE pixelstest SET radec = ST_MakePoint(ra, decl); // WORKS!

# geometry ST_MakePointM(float x, float y, float m);
# Note x is longitude and y is latitude.
# OK, that means x=ra and y=decl
# BUT why just floats!?  Man...  I think I need to use this then
# geometry ST_MakePoint(double precision x, double precision y);

# OK, so I put together a python script to create some PGSQL files to ingest

DROP TABLE fields CASCADE;
DROP TABLE pixels;

CREATE TABLE fields ( 
    fieldId BIGINT PRIMARY KEY,
    run INTEGER,
    camcol SMALLINT,
    field INTEGER,
    filter VARCHAR(1),
    bbox GEOGRAPHY(POLYGON,4326),
    tmid TIMESTAMP WITH TIME ZONE,
    trange TSTZRANGE
  );
CREATE TABLE pixels ( 
    pixelId BIGSERIAL PRIMARY KEY,
    fieldId BIGINT REFERENCES fields(fieldId),
    flux GEOGRAPHY(POINTM,4326),
    mask INTEGER
  );

\i /Users/becker/src/github/kbmod/data/field-006504-r5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/field-006504-i5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/field-006504-g5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/field-006484-r5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/field-006484-i5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/field-006484-g5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/field-006474-r5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/field-006474-i5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/field-006474-g5-0143.pgsql

\i /Users/becker/src/github/kbmod/data/pixel-006474-i5-0143.pgsql
# How long does this take?
\timing on
\timing off
# Note I am also getting warnings like:
# LOG:  checkpoints are occurring too frequently (8 seconds apart)
# HINT:  Consider increasing the configuration parameter "checkpoint_segments".
\i /Users/becker/src/github/kbmod/data/pixel-006474-g5-0143.pgsql
INSERT 0 2685958
Time: 249200.297 ms

\i /Users/becker/src/github/kbmod/data/pixel-006484-i5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006484-g5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006474-r5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006504-i5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006504-g5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006484-r5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006504-r5-0146.pgsql

We are seeing 

INSERT 0 2685958
Time:    249200.297 ms
INSERT 0 2685958
Time:    230619.995 ms
INSERT 0 2685958
Time:    477192.569 ms
INSERT 0 2685958
Time:    299950.059 ms
INSERT 0 2685958
Time:    397692.511 ms
INSERT 0 2685958
Time:    278466.253 ms
INSERT 0 2685958
Time:    430023.594 ms
INSERT 0 2685958
Time:    401805.137 ms


 so like 5-10 inserts per millisecond.  This is pretty slow.  Perhaps
its because we're actually creating the geometry instance during ingest. 
I should try inserting the numbers, and then creating the object en masse?
I also need to fix checkpoint_segments

### Time ZONE NOTE:
http://www.postgresql.org/docs/9.2/static/datatype-datetime.html#DATATYPE-TIMEZONES

All timezone-aware dates and times are stored internally in UTC. They
are converted to local time in the zone specified by the TimeZone
configuration parameter before being displayed to the client.

So you can ingest in UTC, but it displays in your native time zone
when doing queries.  I don't want this.  Fix with:

SET TIME ZONE zulu;


# OK, regarding the inserts, I have a test set up.  I put all the pixel data in 1 file like so:

INSERT INTO pixels (fieldId, flux, mask) VALUES
  (2452920317143861125, ST_MakePointM(-42.921241760, 0.621883571, 0.164214), 0),

and a second set of pixel data like so:

INSERT INTO pixelstest (fieldId, ra, decl, fval, mask) VALUES
  (2452920317143861125, -42.921241760, 0.621883571, 0.164214, 0),

I will make empty tables and time each one, along with

UPDATE pixelstest SET radec = ST_MakePoint(ra, decl); // WORKS!

Log out of server and session window to start each anew

#########

\c kbmod
\timing on
\i /Users/becker/src/github/kbmod/data/pixel_all.pgsql
  # GRRRRRRR
  ERROR:  out of memory
  # Apparently I have to do it 1 by 1...
\i /Users/becker/src/github/kbmod/data/pixel-006474-g5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006474-i5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006474-r5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006484-g5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006484-i5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006484-r5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006504-g5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006504-i5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/pixel-006504-r5-0146.pgsql

# HORRIBLE!!!!
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006474-g5-0143.pgsql
INSERT 0 2685958
Time:    228432.194 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006474-i5-0143.pgsql
INSERT 0 2685958
Time:    372110.526 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006474-r5-0143.pgsql
INSERT 0 2685958
Time:    336953.618 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006484-g5-0144.pgsql
INSERT 0 2685958
Time:    340780.041 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006484-i5-0144.pgsql
INSERT 0 2685958
Time:    409829.032 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006484-r5-0144.pgsql
INSERT 0 2685958
Time:    492588.419 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006504-g5-0146.pgsql
INSERT 0 2685958
Time:    839024.288 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006504-i5-0146.pgsql
INSERT 0 2685958
Time:    1041106.456 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel-006504-r5-0146.pgsql
INSERT 0 2685958
Time:    682793.694 ms

# even count is slow, sheesh...
kbmod=# select count(*) from pixels;
  count   
----------
 24173622
(1 row)

Time: 163169.536 ms


# memory is not redlining
\i /Users/becker/src/github/kbmod/data/pixel2-006474-g5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006474-i5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006474-r5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006484-g5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006484-i5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006484-r5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006504-g5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006504-i5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006504-r5-0146.pgsql
UPDATE pixelstest SET radec = ST_MakePoint(ra, decl);

kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006474-g5-0143.pgsql
INSERT 0 2685958
Time:    139107.434 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006474-i5-0143.pgsql
INSERT 0 2685958
Time:    143488.825 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006474-r5-0143.pgsql
INSERT 0 2685958
Time:    509257.589 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006484-g5-0144.pgsql
INSERT 0 2685958
Time:    265705.262 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006484-i5-0144.pgsql
INSERT 0 2685958
Time:    253639.796 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006484-r5-0144.pgsql
INSERT 0 2685958
Time:    183830.482 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006504-g5-0146.pgsql
INSERT 0 2685958
Time:    214032.912 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006504-i5-0146.pgsql
INSERT 0 2685958
Time:    268228.954 ms
kbmod=# \i /Users/becker/src/github/kbmod/data/pixel2-006504-r5-0146.pgsql
INSERT 0 2685958
Time:    214014.441 ms
kbmod=# UPDATE pixelstest SET radec = ST_MakePoint(ra, decl);
UPDATE 24173622
Time:    891498.223 ms

####### So summary, creating the struct on the fly took 1.3 hours, and after ingest 0.85 hours.

Lets build some indices!

CREATE INDEX fields_gix ON fields USING GIST (bbox);
Time: 178.894 ms
\d fields
CREATE INDEX fields_tidx ON fields USING GIST (trange);
Time: 224.141 ms

CREATE INDEX fieldidx ON pixels (fieldId);
Time: 183091.407 ms

CREATE INDEX fieldidxtest ON pixelstest (fieldId);
ERROR:  relation "fieldidx" already exists
 # INTERESTING, seems like an index is per database, not per table
CREATE INDEX fieldidxtest ON pixelstest (fieldId);
Time: 241332.392 ms

########## EXAMPLE QUERY1

kbmod=# SELECT fieldId FROM fields WHERE TIMESTAMP WITH TIME ZONE '2006-10-28 02:55:13.932192z' <@ trange;
       fieldid       
---------------------
 4689419302083040306
(1 row)

Time: 0.587 ms

  # VALIDATION
  kbmod=# select fieldId, tmid from fields;
         fieldid       |             tmid              
  ---------------------+-------------------------------
   4689419302083040306 | 2006-10-28 02:55:13.932192+00


########## EXAMPLE QUERY2

SELECT fieldId FROM fields WHERE 
  TIMESTAMP WITH TIME ZONE '2006-10-28 02:55:13.932192z' <@ trange
AND
  ST_INTERSECTS(ST_MakePoint(-42.8471955, 0.7336945), bbox);
       fieldid       
---------------------
 4689419302083040306
(1 row)

Time: 0.490 ms

########## EXAMPLE QUERY3



SELECT p.pixelId, p.ra, p.decl, p.fval, ST_DISTANCE(ST_GeomFromText('POINT(-42.8471955 0.7336945)',4326), ST_Transform(p.radec, 4326)) AS dist FROM

SELECT p.pixelId, p.ra, p.decl, p.fval, ST_DISTANCE(ST_SetSRID(ST_MakePoint(-42.8471955, 0.7336945),4326), ST_SetSRID(p.radec,4326)) AS dist FROM
  pixelstest as p,
  fields as f
WHERE
  TIMESTAMP WITH TIME ZONE '2006-10-28 02:55:13.932192z' <@ f.trange
AND
  ST_INTERSECTS(ST_MakePoint(-42.8471955, 0.7336945), f.bbox)
AND
 f.fieldId = p.fieldId
ORDER BY dist
LIMIT 10;

Time: 7950.380 ms
 pixelid  |      ra       |    decl     |   fval    |     dist     
----------+---------------+-------------+-----------+--------------
 21726804 | -42.847244263 | 0.733692229 | -0.254187 |  5.433635969
 21728822 | -42.847133636 | 0.733692229 | -0.261038 |  6.890685292

########## EXAMPLE QUERY4

SELECT p.pixelId, ST_DISTANCE(ST_MakePoint(-42.8471955, 0.7336945), p.flux) AS dist FROM
  pixels as p,
  fields as f
WHERE
  TIMESTAMP WITH TIME ZONE '2006-10-28 02:55:13.932192z' <@ f.trange
AND
  ST_INTERSECTS(ST_MakePoint(-42.8471955, 0.7336945), f.bbox)
AND
 f.fieldId = p.fieldId
ORDER BY dist
LIMIT 10;

 pixelid  |     dist     
----------+--------------
 21726804 |  5.433635969
 21728822 |  6.890685292

#### Why is this not in angles?

http://gis.stackexchange.com/questions/76967/what-is-the-unit-used-in-st-distance

  If your data is in srid 4326 and you use geometry type the result will not give any meaning. It is in degrees.

So, strangely it looks like I need to store things in fields as geometry, not geography...

CREATE TABLE pixels2 ( 
    pixelId BIGSERIAL PRIMARY KEY,
    fieldId BIGINT REFERENCES fields(fieldId),
    ra DOUBLE PRECISION,
    decl DOUBLE PRECISION,
    fval REAL,
    radec GEOMETRY(POINT,4326),
    mask INTEGER
  );
CREATE INDEX fieldidx2 ON pixels2 (fieldId);

\i /Users/becker/src/github/kbmod/data/pixel2-006504-r5-0146.pgsql
UPDATE pixels2 SET radec = ST_SetSRID(ST_MakePoint(ra, decl), 4326);
Time: 97224.161 ms

SELECT p.pixelId, p.ra, p.decl, p.fval, ST_DISTANCE(traj, p.radec) AS dist FROM
  pixels2 as p,
  fields as f,
  ST_SetSRID(ST_MakePoint(-42.8471955, 0.7336945),4326) as traj
WHERE
  TIMESTAMP WITH TIME ZONE '2006-10-28 02:55:13.932192z' <@ f.trange
AND
  ST_INTERSECTS(traj, f.bbox)
AND
 f.fieldId = p.fieldId
ORDER BY dist
LIMIT 10;

 pixelid |      ra       |    decl     |   fval    |         dist         
---------+---------------+-------------+-----------+----------------------
  239140 | -42.847244263 | 0.733692229 | -0.254187 | 4.88158540868469e-05
  241158 | -42.847133636 | 0.733692229 | -0.261038 | 6.19056696632905e-05

### Put the rest in pixels2
\i /Users/becker/src/github/kbmod/data/pixel2-006474-g5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006474-i5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006474-r5-0143.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006484-g5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006484-i5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006484-r5-0144.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006504-g5-0146.pgsql
\i /Users/becker/src/github/kbmod/data/pixel2-006504-i5-0146.pgsql

# Optimizing DB

CREATE TABLE pixels3 ( 
    pixelId BIGSERIAL PRIMARY KEY,
    fieldId BIGINT REFERENCES fields(fieldId),
    ra DOUBLE PRECISION,
    decl DOUBLE PRECISION,
    fval REAL,
    radec GEOMETRY(POINT,4326),
    mask INTEGER
  );

\i /Users/becker/src/github/kbmod/data/pixel3-006474-g5-0143.pgsql

COPY pixels3 (fieldId, ra, decl, fval, mask) FROM '/Users/becker/src/github/kbmod/data/pixel3-006474-g5-0143.csv' WITH csv;

Old way: Time: 247336.065 ms
With csv: Time: 70569.376 ms


SELECT p.pixelId, p.ra, p.decl, p.fval, ST_DISTANCE(traj, p.radec) AS dist FROM
  ST_SetSRID(ST_MakePoint(-42.8471955, 0.7336945),4326) as traj,
  pixels2 as p,
  fields as f
WHERE
  TIMESTAMP WITH TIME ZONE '2006-10-28 02:55:13.932192z' <@ f.trange
AND
  ST_INTERSECTS(traj, f.bbox)
AND
 f.fieldId = p.fieldId
ORDER BY dist
LIMIT 10;

CREATE INDEX tsbbox ON fields (trange, bbox);
CLUSTER pixels2 USING fieldidx2;

kbmod=# CLUSTER pixels2 USING fieldidx2;
CLUSTER
Time: 470051.581 ms
